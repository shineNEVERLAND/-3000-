回文
5：最长的回文子串：【dp】需要求一个子串。思路同[516, 647]
https://leetcode-cn.com/problems/longest-palindromic-substring/

516：最长回文子序列：【dp】需要求一个子序列。思路同[5, 647]
https://leetcode-cn.com/problems/longest-palindromic-subsequence/

647：回文子串：【dp】求给出的字符串，能搞出来多少个回文子串。思路同[5, 516]
https://leetcode-cn.com/problems/palindromic-substrings/

=================================================================

409：最长回文串：【哈希】在给定的字母中，拼凑成一个最长的回文串。
https://leetcode-cn.com/problems/longest-palindrome/

125：验证回文串：【头尾指针/while】判断一个字符串是否是回文。这个蛋疼的是包含标点符号，而且这个用不到动态规划的思路。
https://leetcode-cn.com/problems/valid-palindrome/submissions/

680. 验证回文字符串II：【头尾指针/递归】删掉一个字符是否满足回文串。当s[i]!=s[j]时，判断s[i+1][j]和s[i][j-1]
https://leetcode-cn.com/problems/valid-palindrome-ii/

==================================================

【粉刷房子】
  256：粉刷房子：【dp】
  https://leetcode-cn.com/problems/paint-house/
  265：粉刷房子II：【dp】
  https://leetcode-cn.com/problems/paint-house-ii/
【打家劫舍】
  198. 打家劫舍：【dp】
  https://leetcode-cn.com/problems/house-robber/
  213. 打家劫舍II：【dp】
  https://leetcode-cn.com/problems/house-robber-ii/
  746. 使用最小花费爬楼梯：【dp】（这个和198.打家劫舍的模型一模一样。不同的是返回变量不同）
  https://leetcode-cn.com/problems/min-cost-climbing-stairs/
【栅栏涂色】：
  276：栅栏涂色：【dp】
  https://leetcode-cn.com/problems/paint-fence/
【滑动窗口】：【TODO】

=================================================

【编辑距离】
  72.编辑距离：【dp】，这个看labuladong的fucking_althorithm
  https://leetcode-cn.com/problems/edit-distance
【爬楼梯】
  70.爬楼梯：【dp】，就是斐波那契数列，
  https://leetcode-cn.com/problems/climbing-stairs/
【解码方法】
  91. 解码方法：【dp】，这个是特殊的的爬楼梯（边界问题太特殊了。。）
  https://leetcode-cn.com/problems/decode-ways/
  
===========================================================
 
【回文串问题】
 266.回文排列：求打乱的字符串顺序后，能否构成回文串
 https://leetcode-cn.com/problems/palindrome-permutation/
 409.最长回文串：打乱顺序后，能够构成的回文串的长度
 https://leetcode-cn.com/problems/longest-palindrome/
 这两个题的思路是：用哈希给出字符出现的次数，
    如果是偶数次数，直接count += hash[s[i]]；
    如果是奇数次数，直接count += hash[s[i]] - 1，顺便标记下flag = true；
    count = flag == true ? count + 1: count;

  
  
  
